generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                  String      @id @default(uuid())
    firstName           String?
    lastName            String?
    email               String      @unique
    username            String?      @unique
    password            String
    joinedAt            DateTime    @default(now())
    isConfirmed         Boolean     @default(false)
    avatar              String      @default("default.jpeg")
    phoneNumber         String?     @unique
    personalInterests   Genre[]
    accountType         AccountType @default(REGULAR)

    chats               Chat[]
    ownedBooks          Book[]      @relation("ownedBooks")
    borrowedBooks       Book[]      @relation("borrowedBooks")
}

model ConfirmationCode {
    id                  String      @id @default(uuid())
    code                String
    expiresAt           String

    user                User        @relation(fields: [userId], references: [id])
    userId              String
}

model Chat {
    id                  String      @id @default(uuid())

    users               User[]
    messages            Message[]
}

model Message {
    id                  String      @id @default(uuid())
    content             String
    sentAt              DateTime    @default(now())

    user                User        @relation(fields: [userId], references: [id])
    userId              String

    chat                Chat        @relation(fields: [chatId], references: [id])
    chatId              String
}

model BookData {
    id                  String      @id @default(uuid())
    isbn                String      @unique
    title               String
    description         String
    genre               Genre
    image               String
}

model Book {
    id                  String      @id @default(uuid())
    isbn                String      
    title               String
    description         String
    genre               Genre
    image               String
    rating              Float?
    googleRating        Float?
    addedAt             DateTime    @default(now())

    ownedBy             User        @relation("ownedBooks", fields: [ownedById], references: [id])
    ownedById           String      

    borrowedBy          User?       @relation("borrowedBooks", fields: [borrowedById], references: [id])
    borrowedById        String?
}

model Review {
    id                  String      @id @default(uuid())
    isbn                String  
    content             String
    rating              Float

    user                User        @relation(fields: [userId], references: [id])
    userId              String
}

enum Genre {
    ACTION
    ADVENTURE
    BIOGRAPHY
    BUSINESS
    CHILDRENS
    COOKING
    CRIME
    DRAMA
    DICTIONARY
    ENCYKLOPEDIA
    GUIDE
    FAIRYTALE
    FANTASY
    HEALTH
    HISTORICAL
    HUMOR
    HORROR
    JOURNAL
    MATH
    ROMANCE
    PHILOSOPHY
    RELIGION
    SCIENCE_FICTION
    SELF_DEVELOPMENT
    SPORTS
    TRAVEL
    WESTERN
}

enum AccountType {
    REGULAR
    GOOGLE
    FACEBOOK
}